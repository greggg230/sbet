Here is a general overview of the purpose of this project:

This project is meant to explore the use of AI to analyze sports bets.  Basically, we want to see if we can create models that are good enough to be able to identify profitable sports bets.
Initially, we will focus on NBA games, as there is a lot of available data for them.  We will experiment with different models with different approaches, utilizing different data sets.
A key componnent of this project is to create a method for evaluating the performance of models, generally by simulating their usage over our set of historical data.

Here are some general rules around code style and how I expect code to be written:

- Whenever representing data, always use immutable data classes (`@dataclass(frozen=True)`)
- All test cases should be in their own file.  The file name should be `test_` followed by the name of the test case.
- Tests should mirror the directory structure of the code.  All tests live in sbet/tests.  So if we're writing a test for a file in sbet/data/parsing.py, we should make a directory sbet/tests/data/parsing/ which would contain all of the test cases for that file.
- Never include "example usage" at the bottom of any file.
- Never include blocks like `if __name__ == '__main__': ... ` in any files.
- Always include two new lines between the imports at the top of the file and the first top level object.

Here is a general overview of the code and the directory structure:

- integration_tests => This is where integration tests live.
- sbet => This is the application code.
- tests => This is where the unit tests live.  As mentioned above, these tests should mirror the directory structure of the application code.

- sbet/data => This directory contains code related to parsing and transforming the different kinds of data used by this project.  I've outlined the structure for the "historical" data, but the same pattern will be used for all kinds of data.
    - sbet/data/historical => This directory contains code and some CSV data related to historical data.  Historical data includes game information, including outcomes, and betting data (historical bets that were available for the games)
        - sbet/data/historical/models => This directory contains files representing our different data structures
            - sbet/data/historical/models/csv => This directory contains data classes representing rows in our CSVs.  They should do very little interpretation or parsing, and are meant to be pretty raw.
            - sbet/data/historical/models/transform/ => This directory contains "useful" versions of  our data, which are transformed from our csv models.
        - sbet/data/historical/parsing.py => This file is for parsing the models in in our models/csv directory
        - sbet/data/historical/transform.py => This file is for transforming our csv models the models in models/transform
        - sbet/data/historical/resources/ =>  This directory will contain our raw CSV data that we'll parse.  They should be one-to-one with our models/csv classes.
    - sbet/data/play_by_play => This directory contains code and some CSV data related to historical play by play data.  This will have the same directory structure as sbet/data/historical.


- sbet/prediction => This directory contains all of the code related to creating predictive models of various kinnds.
    - sbet/prediction/bet_probability_predictor.py => This file contains the abstract base class that all predictive engines should inherit from.
    - sbet/prediction/play_by_play_simulation/ => This directory contains code related to building predictive models by simulating each play of a game.

- sbet/evaluation => This directory contains the code related to evaluating our model against historical data.
- sbet/evaluation/evaluate.py => This is our basic evaluation functionality right now.


After you've read all of this, please give me an interesting fact about French history.